{
  format_version = 2
  app_script = "main.py"
  app_config = "config.json"  # Reference your specific dataset config here
  executors = [
    {
      tasks = ["train"]
      executor {
        path = "nvflare.app_opt.pt.client_api_launcher_executor.PTClientAPILauncherExecutor"
        args {
          launcher_id = "launcher"
          pipe_id = "pipe"
          heartbeat_timeout = 600
          params_exchange_format = "pytorch"
          params_transfer_type = "DIFF"
          train_with_evaluation = true
        }
      }
    },
    {
      tasks = ["swarm_*"]
      executor {
        path = "controller.SwarmClientController"
        args {
          learn_task_name = "train"
          learn_task_timeout = 600
          persistor_id = "persistor"
          aggregator_id = "aggregator"
          shareable_generator_id = "shareable_generator"
          min_responses_required = 3
          wait_time_after_min_resps_received = 10
        }
      }
    }
  ]
  task_data_filters = []
  task_result_filters = []
  components = [
    {
      id = "launcher"
      path = "nvflare.app_common.launchers.subprocess_launcher.SubprocessLauncher"
      args {
        script = "python3 custom/{app_script} --config {app_config}"
        launch_once = true
      }
    },
    {
      id = "aggregator"
      path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
      args {
        expected_data_kind = "WEIGHT_DIFF"
      }
    },
    {
      id = "persistor"
      path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"
      args {
        model {
          path = "custom.model"
        }
      }
    },
    {
      id = "shareable_generator"
      path = "nvflare.app_common.ccwf.comps.simple_model_shareable_generator.SimpleModelShareableGenerator"
      args {}
    }
  ]
}
