{
  format_version = 2
  app_script = "main.py"
  app_config = ""  # Updated per client for dataset independence
  executors = [
    {
      tasks = ["train"]
      executor {
        path = "nvflare.app_opt.pt.client_api_launcher_executor.PTClientAPILauncherExecutor"
        args {
          launcher_id = "launcher"
          pipe_id = "pipe"
          heartbeat_timeout = 6000000
          params_exchange_format = "pytorch"
          params_transfer_type = "DIFF"
          train_with_evaluation = true
        }
      }
    },
    {
      tasks = ["swarm_*"]
      executor {
        path = "controller.controller.SwarmClientController"
        args {
          learn_task_name = "train"
          learn_task_timeout = 6000000
          persistor_id = "persistor"
          aggregator_id = "aggregator"
          shareable_generator_id = "shareable_generator"
          min_responses_required = 3  # Adjust based on the number of clients
          wait_time_after_min_resps_received = 300
        }
      }
    }
  ]
  task_data_filters = []
  task_result_filters = []
  components = [
    {
      id = "launcher"
      path = "nvflare.app_common.launchers.subprocess_launcher.SubprocessLauncher"
      args {
        script = "python3 custom/{app_script}  {app_config}"
        launch_once = true
      }
    },
    {
      id = "pipe"
      path = "nvflare.fuel.utils.pipe.cell_pipe.CellPipe"
      args {
        mode = "PASSIVE"
        site_name = "{SITE_NAME}"
        token = "{JOB_ID}"
        root_url = "{ROOT_URL}"
        secure_mode = "{SECURE_MODE}"
        workspace_dir = "{WORKSPACE}"
      }
    },
    {
      id = "aggregator"
      path = "nvflare.app_common.aggregators.intime_accumulate_model_aggregator.InTimeAccumulateWeightedAggregator"
      args {
        expected_data_kind = "WEIGHT_DIFF"
      }
    },
    {
      id = "persistor"
      path = "nvflare.app_opt.pt.file_model_persistor.PTFileModelPersistor"
      args {
        model {
          path = "custom.models.model_lit.LitModel"
          args {
              in_ch = 3  # Example: number of input channels, e.g., for RGB images
              out_ch = 8  # Example: number of output classes
              spatial_dims = 2  # Example: 2D spatial dimensions
              model_type = "densenet"
              lr = 0.0005
              criterion_name = "BCELoss"
              num_labels = 8
              seed = 3
          }
        }
      }
    },
    {
      id = "shareable_generator"
      path = "nvflare.app_common.ccwf.comps.simple_model_shareable_generator.SimpleModelShareableGenerator"
      args {}
    },
    {
      id = "metrics_pipe"
      path = "nvflare.fuel.utils.pipe.cell_pipe.CellPipe"
      args {
        mode = "PASSIVE"
        site_name = "{SITE_NAME}"
        token = "{JOB_ID}"
        root_url = "{ROOT_URL}"
        secure_mode = "{SECURE_MODE}"
        workspace_dir = "{WORKSPACE}"
      }
    },
    {
      id = "metric_relay"
      path = "nvflare.app_common.widgets.metric_relay.MetricRelay"
      args {
        pipe_id = "metrics_pipe"
        event_type = "fed.analytix_log_stats"
        read_interval = 0.1
      }
    },
      {
    id = "model_selector"
    path = "nvflare.app_common.widgets.intime_model_selector.IntimeModelSelector"
    args {
      key_metric = "val_accuracy"
    }
  },
    {
      id = "config_preparer"
      path = "nvflare.app_common.widgets.external_configurator.ExternalConfigurator"
      args {
        component_ids = [
          "metric_relay"
        ]
      }
    }
  ]
}
